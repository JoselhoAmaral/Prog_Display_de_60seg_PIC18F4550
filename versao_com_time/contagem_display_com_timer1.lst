CCS PCH C Compiler, Version 5.015, 5967               06-jul-21 22:50

               Filename:   C:\Users\Joselho Amaral\Documents\IFCE\S8 - Eng. Automação e Controle\Microcontroladores\Atividade 06 - contagem com time\contagem_display_com_timer1.lst

               ROM used:   444 bytes (1%)
                           Largest free fragment is 32320
               RAM used:   26 (1%) at main() level
                           39 (2%) worst case
               Stack used: 1 locations (0 in main + 1 for interrupts)
               Stack size: 31

*
0000:  GOTO   0182
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.0
004A:  GOTO   0054
004E:  BTFSC  F9E.0
0050:  GOTO   0096
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... #include<18F4550.h>            
.................... //////////// Standard Header file for the PIC18F4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4550 
....................  
.................... #list 
....................  
.................... #fuses HS, NOWDT, CPUDIV1 
.................... #use delay (clock=20MHz) 
.................... #int_timer1 
....................  
.................... void funcao_contador(){ 
....................     
....................    static unsigned int miliSegundo; 
....................    static unsigned int unidade; 
....................    static int dezena; 
....................    static boolean flag = 0; 
....................    set_timer1(34286 + get_timer1()); 
0096:  MOVF   FCE,W
0098:  MOVFF  FCF,03
009C:  ADDLW  EE
009E:  MOVWF  25
00A0:  MOVLW  85
00A2:  ADDWFC FCF,W
00A4:  MOVWF  FCF
00A6:  MOVFF  25,FCE
....................    int digito[10] = 
....................                {0b00111111,    //Dígito 0 
....................                 0b00000110,    //Dígito 1 
....................                 0b01011011,    //Dígito 2 
....................                 0b01001111,    //Dígito 3 
....................                 0b01100110,    //Dígito 4 
....................                 0b01101101,    //Dígito 5 
....................                 0b01111101,    //Dígito 6 
....................                 0b00000111,    //Dígito 7 
....................                 0b01111111,    //Dígito 8 
....................                 0b01101111     //Dígito 9 
....................                }; 
00AA:  MOVLW  3F
00AC:  MOVWF  1A
00AE:  MOVLW  06
00B0:  MOVWF  1B
00B2:  MOVLW  5B
00B4:  MOVWF  1C
00B6:  MOVLW  4F
00B8:  MOVWF  1D
00BA:  MOVLW  66
00BC:  MOVWF  1E
00BE:  MOVLW  6D
00C0:  MOVWF  1F
00C2:  MOVLW  7D
00C4:  MOVWF  20
00C6:  MOVLW  07
00C8:  MOVWF  21
00CA:  MOVLW  7F
00CC:  MOVWF  22
00CE:  MOVLW  6F
00D0:  MOVWF  23
....................    if (((input(PIN_B0)) == 0)&&(flag == 1)){ 
00D2:  BSF    F93.0
00D4:  BTFSC  F81.0
00D6:  BRA    00DE
00D8:  BTFSS  19.0
00DA:  BRA    00DE
....................    flag = 0; 
00DC:  BCF    19.0
....................    } 
....................    if (((input(PIN_B0)) == 0)&&(flag == 0)){ 
00DE:  BSF    F93.0
00E0:  BTFSC  F81.0
00E2:  BRA    00F0
00E4:  BTFSC  19.0
00E6:  BRA    00F0
....................       flag = 1; 
00E8:  BSF    19.0
....................       milisegundo = 0; 
00EA:  CLRF   16
....................       unidade = 0; 
00EC:  CLRF   17
....................       dezena = 0; 
00EE:  CLRF   18
....................    } 
....................     
....................    if ((flag != 0)&&(((dezena*10)+unidade) < 48)){ 
00F0:  BTFSS  19.0
00F2:  BRA    0178
00F4:  MOVF   18,W
00F6:  MULLW  0A
00F8:  MOVF   FF3,W
00FA:  ADDWF  17,W
00FC:  SUBLW  2F
00FE:  BNC   0178
....................     
....................       boolean opcao = miliSegundo%2; 
0100:  MOVF   16,W
0102:  ANDLW  01
0104:  BCF    24.0
0106:  BTFSC  FE8.0
0108:  BSF    24.0
....................       switch (opcao){ 
010A:  MOVLW  00
010C:  BTFSC  24.0
010E:  MOVLW  01
0110:  XORLW  00
0112:  BZ    011A
0114:  XORLW  01
0116:  BZ    013A
0118:  BRA    0158
....................          case 0: 
....................             OUTPUT_D(digito[unidade]); 
011A:  CLRF   03
011C:  MOVF   17,W
011E:  ADDLW  1A
0120:  MOVWF  FE9
0122:  MOVLW  00
0124:  ADDWFC 03,W
0126:  MOVWF  FEA
0128:  MOVFF  FEF,25
012C:  CLRF   F95
012E:  MOVFF  25,F8C
....................             OUTPUT_A(0b00100000); 
0132:  CLRF   F92
0134:  MOVLW  20
0136:  MOVWF  F89
....................          break; 
0138:  BRA    0158
....................           
....................          case 1: 
....................             OUTPUT_D(digito[dezena]); 
013A:  CLRF   03
013C:  MOVF   18,W
013E:  ADDLW  1A
0140:  MOVWF  FE9
0142:  MOVLW  00
0144:  ADDWFC 03,W
0146:  MOVWF  FEA
0148:  MOVFF  FEF,25
014C:  CLRF   F95
014E:  MOVFF  25,F8C
....................             OUTPUT_A(0b00010000); 
0152:  CLRF   F92
0154:  MOVLW  10
0156:  MOVWF  F89
....................          break; 
....................       } 
....................        
....................       miliSegundo++; 
0158:  INCF   16,F
....................       if(miliSegundo == 20){ 
015A:  MOVF   16,W
015C:  SUBLW  14
015E:  BNZ   0164
....................    // Se a interrupção for 0,05s, será if (miliSegundo == 20) 
....................    // Se a interrupção for 0,02s, será if (miliSegundo == 50) 
....................          unidade++; 
0160:  INCF   17,F
....................          miliSegundo = 0; 
0162:  CLRF   16
....................       }    
....................       if (unidade == 10){ 
0164:  MOVF   17,W
0166:  SUBLW  0A
0168:  BNZ   016E
....................             dezena++; 
016A:  INCF   18,F
....................             unidade = 0; 
016C:  CLRF   17
....................       }    
....................       if (dezena == 10){ 
016E:  MOVF   18,W
0170:  SUBLW  0A
0172:  BNZ   0176
....................             dezena = 0; 
0174:  CLRF   18
....................       } 
....................    } 
0176:  BRA    017C
....................    else{ 
....................       OUTPUT_D(0b00000000); 
0178:  CLRF   F95
017A:  CLRF   F8C
....................    } 
017C:  BCF    F9E.0
017E:  GOTO   0054
.................... } 
....................  
.................... void main(){ 
0182:  CLRF   FF8
0184:  BCF    FD0.7
0186:  BSF    07.7
0188:  BCF    19.0
018A:  MOVF   FC1,W
018C:  ANDLW  C0
018E:  IORLW  0F
0190:  MOVWF  FC1
0192:  MOVLW  07
0194:  MOVWF  FB4
0196:  CLRF   16
0198:  CLRF   17
019A:  CLRF   18
....................    port_b_pullups(true);   // Liga os pull ups 
019C:  BCF    FF1.7
....................    output_d(0);            // Desliga todas as portas D 
019E:  CLRF   F95
01A0:  CLRF   F8C
....................    SET_TRIS_B(0xFF); 
01A2:  MOVLW  FF
01A4:  MOVWF  F93
....................    SET_TRIS_D(0x00); 
01A6:  MOVLW  00
01A8:  MOVWF  F95
....................     
....................    setup_timer_1 (T1_INTERNAL|T1_DIV_BY_8); 
01AA:  MOVLW  B5
01AC:  MOVWF  FCD
....................    set_timer1(34286); // Quando 34286, a interrupção ocorrerá a cada 0,05s 
01AE:  MOVLW  85
01B0:  MOVWF  FCF
01B2:  MOVLW  EE
01B4:  MOVWF  FCE
....................                       // Quando 53036, a interrupção ocorrerá a cada 0,02s  
....................    enable_interrupts(GLOBAL); 
01B6:  MOVLW  C0
01B8:  IORWF  FF2,F
....................    enable_interrupts(INT_TIMER1); 
01BA:  BSF    F9D.0
....................     
....................    while (true) 
....................    { } 
01BC:  BRA    01BC
.................... } 
01BE:  SLEEP 

Configuration Fuses:
   Word  1: CC27   PLL12 CPUDIV1 USBDIV HS FCMEN IESO
   Word  2: 1E3E   PUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
